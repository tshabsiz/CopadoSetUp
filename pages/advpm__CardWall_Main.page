<apex:page standardController="advpm__Matter__c" extensions="advpm.CardWallController" id="thePage" cache="false" sidebar="false" showHeader="false">
    <apex:slds />
    
    <apex:includeScript value="{!URLFOR($Resource.advpm__jQueryZip, 'js/jquery-1.8.3.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.advpm__jQuery_UI_Custom, 'js/jquery-ui-1.8.24.custom.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.advpm__jQuery_TouchUI, 'js/jquery.ui.touch-punch.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.advpm__jQuery_Cookie, 'js/jquery.cookie.js')}" />
    
    <!-- CANNOT use the svg4everybody due to an error occurring in IE, the workaround is to use modified svg4everybody for this page only -->
    <!-- <apex:includeScript value="{!URLFOR($Resource.svg4everybody, 'v2.1.9/dist/svg4everybody.min.js')}" /> -->
    <script type="text/javascript">
    !function(root, factory) {
        "function" == typeof define && define.amd ? // AMD. Register as an anonymous module unless amdModuleId is set
        define([], function() {
            return root.svg4everybody = factory();
        }) : "object" == typeof module && module.exports ? // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory() : root.svg4everybody = factory();
    }(this, function() {
        /*! svg4everybody v2.1.9 | github.com/jonathantneal/svg4everybody */
        function embed(parent, svg, target) {
            // if the target exists
            if (target) {
                // create a document fragment to hold the contents of the target
                var fragment = document.createDocumentFragment(), viewBox = !svg.hasAttribute("viewBox") && target.getAttribute("viewBox");
                // conditionally set the viewBox on the svg
                viewBox && svg.setAttribute("viewBox", viewBox);
                // copy the contents of the clone into the fragment
                for (// clone the target
                var clone = target.cloneNode(!0); clone.childNodes.length; ) {
                    fragment.appendChild(clone.firstChild);
                }
                // append the fragment into the svg
                parent.appendChild(fragment);
            }
        }
        function loadreadystatechange(xhr) {
            // listen to changes in the request
            xhr.onreadystatechange = function() {
                // if the request is ready
                if (4 === xhr.readyState) {
                    // get the cached html document
                    var cachedDocument = xhr._cachedDocument;
                    // ensure the cached html document based on the xhr response
                    cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(""), 
                    cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item
                    xhr._embeds.splice(0).map(function(item) {
                        // get the cached target
                        var target = xhr._cachedTarget[item.id];
                        // ensure the cached target
                        target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)), 
                        // embed the target into the svg
                        embed(item.parent, item.svg, target);
                    });
                }
            }, // test the ready state change immediately
            xhr.onreadystatechange();
        }
        function svg4everybody(rawopts) {
            function oninterval() {
                // while the index exists in the live <use> collection
                for (// get the cached <use> index
                var index = 0; index < uses.length; ) {
                    // get the current <use>
                    var use = uses[index], parent = use.parentNode, svg = getSVGAncestor(parent), src = use.getAttribute("xlink:href") || use.getAttribute("href");
                    if (!src && opts.attributeName && (src = use.getAttribute(opts.attributeName)), 
                    svg && src) {
                        if (polyfill) {
                            if (!opts.validate || opts.validate(src, svg, use)) {
                                // remove the <use> element
                                parent.removeChild(use);
                                // parse the src and get the url and id
                                var srcSplit = src.split("#"), url = srcSplit.shift(), id = srcSplit.join("#");
                                // if the link is external
                                if (url.length) {
                                    if(Sarissa.originalXMLHttpRequest){
                                        var XMLHttpRequest = Sarissa.originalXMLHttpRequest;
                                    }
                                    
                                    // get the cached xhr request
                                    var xhr = requests[url];
                                    // ensure the xhr request exists
                                    xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open("GET", url), xhr.send(), 
                                    xhr._embeds = []), // add the svg and id as an item to the xhr embeds list
                                    xhr._embeds.push({
                                        parent: parent,
                                        svg: svg,
                                        id: id
                                    }), // prepare the xhr ready state change event
                                    loadreadystatechange(xhr);
                                } else {
                                    // embed the local id into the svg
                                    embed(parent, svg, document.getElementById(id));
                                }
                            } else {
                                // increase the index when the previous value was not "valid"
                                ++index, ++numberOfSvgUseElementsToBypass;
                            }
                        }
                    } else {
                        // increase the index when the previous value was not "valid"
                        ++index;
                    }
                }
                // continue the interval
                (!uses.length || uses.length - numberOfSvgUseElementsToBypass > 0) && requestAnimationFrame(oninterval, 67);
            }
            var polyfill, opts = Object(rawopts), newerIEUA = /\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/, webkitUA = /\bAppleWebKit\/(\d+)\b/, olderEdgeUA = /\bEdge\/12\.(\d+)\b/, edgeUA = /\bEdge\/.(\d+)\b/, inIframe = window.top !== window.self;
            polyfill = "polyfill" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;
            // create xhr requests object
            var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName("use"), numberOfSvgUseElementsToBypass = 0;
            // conditionally start the interval if the polyfill is active
            polyfill && oninterval();
        }
        function getSVGAncestor(node) {
            for (var svg = node; "svg" !== svg.nodeName.toLowerCase() && (svg = svg.parentNode); ) {}
            return svg;
        }
        return svg4everybody;
    });
    </script>
    <script type="text/javascript">
        var isSF1           = {!isSF1};
        var isLightning     = {!isLightning};
        var cwTaskPage      = '{!SalesforceBaseUrl}{!$Site.Prefix}/apex/{!JSINHTMLENCODE(EditCalendarPageTasks)}';
        var taskStatusFilterCookieName = 'task-status-filters';
        var inprogressStatus    = '{!JSINHTMLENCODE(inprogressStatus)}';
        var completedStatus     = '{!JSINHTMLENCODE(completedStatus)}';
        var currUrl             = '{!URLENCODE($CurrentPage.URL)}';
        var gotoUrl             = '{!URLENCODE($CurrentPage.parameters.gotoURL)}';
    </script>
    <apex:includeScript value="{!URLFOR($Resource.advpm__Kanban, 'js/KanbanJS.js')}" />
    <apex:styleSheet value="{!URLFOR($Resource.advpm__Kanban, 'css/Kanban.css')}" />
    
    <apex:pageMessages id="msgs" />
    
    <apex:form id="theForm">
        <apex:actionFunction name="ReloadTasks" action="{!Reload}" rerender="kanban-container,msgs" oncomplete="init_board()" />
        <apex:actionFunction name="ReloadUsers" action="{!LoadUsers}" rerender="user-list-container,msgs" oncomplete="init_userDraggables();" />
        
        <apex:inputCheckbox styleClass="checkbox caloption my-tasks-only" id="chkMyTasksOnly" value="{!myTasks}" style="display:none;" />
        <apex:inputCheckbox styleClass="checkbox caloption show-participants-only" id="chkParticipantsOnly" value="{!onlyParticipants}" style="display:none;" />
    </apex:form>
    
    <div class="forceListViewManager">
        <div id="view" class="slds-grid listDisplays">
            <apex:outputPanel id="kanban-container" layout="block" styleClass="listViewContainer">
                <div class="forceListViewManagerPrimaryDisplayManager">
                    <div class="displayArea">
                        <div id="kanban-view" class="blockMe runtime_sales_pipelineboardPipelineView">
                            <div class="myCalBorder container slds-scrollable--x" id="kanban-content">
                                <apex:repeat value="{!list_TaskStatus}" var="s">
                                    <!-- TASK Status Column -->
                                    <div class="task-column inactive-column pipelineColumn runtime_sales_pipelineboardPipelineViewColumn task-list-{!LOWER(SUBSTITUTE(s,' ','-'))}" id="task-list-{!LOWER(SUBSTITUTE(s,' ','-'))}" data-key="{!s}">
                                        <div class="runtime_sales_pipelineboardPipelineViewColumnHeader">
                                            <div class="tooltip-trigger tooltip-basic uiTooltip">
                                                <span class="stageHeader pipelineHeader">
                                                    <span class="stageHeaderLabel uiOutputText">{!s}</span> &nbsp; 
                                                    <span class="stageHeaderCount uiOutputText" >({!map_CountByStatus[s]})</span>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="sortable-list listContent slds-scrollable--y" id="{!LOWER(SUBSTITUTE(s,' ','-'))}">
                                            <apex:repeat value="{!map_TasksByStatus[s]}" var="task">
                                                <!-- TASK Card -->
                                                <div class="runtime_sales_pipelineboardPipelineViewCardStencil forceRecordLayout">
                                                    <div class="pipelineViewCard task-card-info {!task.WhatId} ui-droppable uiDraggable" id="{!task.Id}" style="display: block; ">
                                                        <input type="hidden" class="matterId" value="{!task.WhatId}" />
                                                        <div class="pipelineViewCardInnerWrapper" id="{!task.Id}-header">
                                                            <p class="primaryDisplayField task-subject slds-truncate" title="{!task.Subject}">
                                                                <a href="javascript:void(0);" class="task-open" taskid="{!task.Id}">
                                                                    <span class="task-action-text">{!task.Subject}</span>
                                                                </a>
                                                            </p>
                                                            <div class="showActions slds-dropdown-trigger slds-dropdown-trigger--click" href="javascript:void(0);" draggable="false">
                                                                <button class="slds-button slds-button--neutral showActionsButton uiButton" type="button">
                                                                    <span class="assistiveText">Actions</span>
                                                                    <span class="slds-icon_container slds-icon-utility-down slds-button__icon forceIcon">
                                                                        <span >
                                                                            <img class="slds-icon--xx-small slds-icon" src="{!URLFOR($Resource.SLDS_ADV, 'assets/icons/utility/down_60.png')}" />
                                                                        </span>
                                                                    </span>
                                                                </button>
                                                                <div class="slds-dropdown slds-dropdown--right">
                                                                    <ul class="slds-dropdown__list" role="menu">
                                                                        <li class="slds-dropdown__item" role="presentation">
                                                                            <a href="javascript:void(0);" class="task-open" role="menuitem" tabindex="0" taskid="{!task.Id}">
                                                                                <span class="task-action-text slds-truncate">Open</span>
                                                                            </a>
                                                                        </li>
                                                                        <li class="slds-dropdown__item {!IF(task[KanbanGroupingField] == 'Completed', 'slds-hide', '')}" role="presentation">
                                                                            <a href="javascript:void(0);" class="task-start-finish" role="menuitem" tabindex="0" taskid="{!task.Id}">
                                                                                <span class="task-action-text slds-truncate">{!IF(task[KanbanGroupingField] == defaultStatus,'Start',IF(task[KanbanGroupingField] == completedStatus,'','Finish'))}</span>
                                                                            </a>
                                                                        </li>
                                                                    </ul>
                                                                </div>
                                                            </div>
                                                            <p class="aggregateField">
                                                                <span class="task-duedate task-duedate-{!IF(NOT(ISBLANK(task.ActivityDate)) && task.ActivityDate >= TODAY(),'date','overdue')}">
                                                                    <apex:outputField value="{!task.ActivityDate}" rendered="{!!ISBLANK(task.ActivityDate) && task.ActivityDate != TODAY()}" />
                                                                    <apex:outputPanel rendered="{!task.ActivityDate == TODAY()}">today</apex:outputPanel>
                                                                    <apex:outputPanel rendered="{!ISBLANK(task.ActivityDate)}">no due date</apex:outputPanel>
                                                                </span>
                                                            </p>
                                                            <p class="runtime_sales_pipelineboardPipelineViewCardItemStencil">&nbsp;</p>
                                                            <span class="avtarIcon">
                                                                <span class="slds-avatar slds-avatar--circle slds-avatar--small">
                                                                    <img class="task-card-user-photo" src="{!map_TaskUser[task.OwnerId]}" alt="{!task.Owner.Name}" title="{!task.Owner.Name}" taskid="{!task.Id}" />
                                                                </span>
                                                            </span>
                                                            <div class="follow-unfollow">
                                                                <apex:outputPanel rendered="{!map_TaskFollowed[task.Id] == 'False' && isTaskFeedEnabled}" layout="none">
                                                                    <button class="slds-button slds-button--neutral followIcon activityAlert uiButton task-follow-toggle" type="button" taskid="{!task.Id}" title="Follow">
                                                                        <span class="assistiveText">Follow</span>
                                                                        <span class="slds-icon_container slds-icon-utility-warning slds-button__icon forceIcon">
                                                                            <span >
                                                                                <!-- <c:svg styleClass="slds-icon--xx-small slds-icon" path="{!URLFOR($Resource.SLDS_ADV, 'assets/icons/utility-sprite/svg/symbols.svg#new')}" /> -->
                                                                                <img class="slds-icon--xx-small slds-icon" src="{!URLFOR($Resource.images, 'img/new_warning_60.png')}" alt="Follow" />
                                                                            </span>
                                                                        </span>
                                                                    </button>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!map_TaskFollowed[task.Id] == 'True' && isTaskFeedEnabled}" layout="none">
                                                                    <button class="slds-button slds-button--neutral unfollowIcon activityAlert uiButton task-follow-toggle" type="button" taskid="{!task.Id}" title="Unfollow">
                                                                        <span class="assistiveText">Unfollow</span>
                                                                        <span class="slds-icon_container slds-icon-utility-warning slds-button__icon forceIcon">
                                                                            <span >
                                                                                <!-- <c:svg styleClass="slds-icon--xx-small slds-icon" path="{!URLFOR($Resource.SLDS_ADV, 'assets/icons/utility-sprite/svg/symbols.svg#clear')}" /> -->
                                                                                <img class="slds-icon--xx-small slds-icon" src="{!URLFOR($Resource.SLDS_ADV, 'assets/icons/utility/clear_60.png')}" alt="Unfollow" />
                                                                            </span>
                                                                        </span>
                                                                    </button>
                                                                </apex:outputPanel>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </apex:repeat>
                                        </div>
                                    </div>
                                </apex:repeat>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </apex:outputPanel>
            <div class="forceListViewManagerSecondaryDisplayManager">
                <div class="forceFilterPanel slds-hide">
                    <div class="panelHeader">
                        <h2>Kanban Setup</h2>
                        <a class="close" href="javascript:void(0);" onclick="$j('#paneSlide').click();">
                            <span class="slds-icon_container slds-icon-utility-forward">
                                <span>
                                    <c:svg styleClass="slds-icon slds-icon-text-default slds-icon--x-small slds-icon" path="{!URLFOR($Resource.advpm__SLDS_ADV, 'assets/icons/utility-sprite/svg/symbols.svg#forward')}" />
                                </span>
                                <span class="slds-assistive-text">Close</span>
                            </span>
                        </a>
                    </div>
                    
                    <div class="panelBody">
                        <div class="slds-tabs--default kanban-options-tab">
                            <ul class="slds-tabs--default__nav" role="tablist">
                                <li class="slds-tabs--default__item slds-active tab-steps" title="Steps" role="presentation">
                                    <a class="slds-tabs--default__link" href="javascript:void(0);" role="tab" id="tab-default-1__item" onclick="selectTab('steps');return false;">
                                        <c:svg styleClass="slds-button__icon" path="{!URLFOR($Resource.advpm__SLDS_ADV, 'assets/icons/utility-sprite/svg/symbols.svg#filter')}" />&nbsp;
                                        Steps
                                    </a>
                                </li>
                                <li class="slds-tabs--default__item tab-users" title="User Options" role="presentation">
                                    <a class="slds-tabs--default__link" href="javascript:void(0);" role="tab" id="tab-default-2__item" onclick="selectTab('users');return false;">
                                        <c:svg styleClass="slds-button__icon" path="{!URLFOR($Resource.advpm__SLDS_ADV, 'assets/icons/utility-sprite/svg/symbols.svg#user_role')}" />&nbsp;
                                        User Options
                                    </a>
                                </li>
                                <li style="width: 100%;">
                                    <button class="slds-button slds-button--neutral task-open" title="New Task" style="margin-top: 4px;float:right;">
                                        <span>New Task</span>
                                    </button>
                                </li>
                            </ul>
                            <div id="tab-default-1" class="slds-tabs--default__content tab-steps-content">
                                <!-- Kanban Steps -->
                                <ul class="dropdown__list slds-scrollable--y kanban-steps-filter" role="menu">
                                    <apex:repeat value="{!list_TaskStatus}" var="s">
                                        <li class="slds-dropdown__item slds-is-selected" data-col="task-list-{!LOWER(SUBSTITUTE(s,' ','-'))}" data-label="{!LOWER(SUBSTITUTE(s,' ','-'))}">
                                            <a href="javascript:void(0)" role="menuitemradio">
                                                <span class="slds-truncate">
                                                    <!-- <img class="slds-icon slds-icon--selected slds-icon--x-small slds-icon-text-default slds-m-right--x-small" src="{!URLFOR($Resource.SLDS_ADV, 'assets/icons/utility/check_60.png')}" /> -->
                                                    <c:svg styleClass="slds-icon slds-icon--selected slds-icon--x-small slds-icon-text-default slds-m-right--x-small" path="{!URLFOR($Resource.advpm__SLDS_ADV, 'assets/icons/utility-sprite/svg/symbols.svg#check')}" />
                                                    <span class="opt-text">{!s}</span>
                                                </span>
                                            </a>
                                        </li>
                                    </apex:repeat>
                                </ul>
                            </div>
                            <div id="tab-default-2" class="slds-tabs--default__content slds-hide tab-users-content">
                                <!-- User Options -->
                                <ul class="dropdown__list slds-scrollable--y kanban-user-filter">
                                    <li class="slds-dropdown__item {!IF(myTasks,'slds-is-selected','slds-not-selected')} my-tasks-only">
                                        <a href="javascript:void(0)" role="menuitemradio">
                                            <span class="slds-truncate">
                                                <c:svg styleClass="slds-icon slds-icon--selected slds-icon--x-small slds-icon-text-default slds-m-right--x-small" path="{!URLFOR($Resource.advpm__SLDS_ADV, 'assets/icons/utility-sprite/svg/symbols.svg#check')}" />
                                                <apex:outputLabel for="chkMyTasksOnly" value="My Tasks Only" styleClass="opt-text" />
                                            </span>
                                        </a>
                                    </li>
                                </ul>
                                <!-- User List -->
                                <div class="kanban-user-participants">
                                    <div class="slds-section-title--divider">
                                        <span>Users</span>
                                        <span class="slds-form-element">
                                            <span class="slds-form-element__icon slds-align-middle">
                                                <button class="slds-button slds-button slds-button--icon" aria-describedby="help" title="Help" onmouseenter="$j('.user-list-info').removeClass('slds-hide')" onmouseleave="$j('.user-list-info').addClass('slds-hide')">
                                                    <c:svg styleClass="slds-button__icon" path="{!URLFOR($Resource.advpm__SLDS_ADV, 'assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                    <span class="slds-assistive-text">Help</span>
                                                </button>
                                            </span>
                                        </span>
                                        <div class="slds-popover slds-popover--tooltip slds-nubbin--bottom-left slds-hide user-list-info" role="tooltip" id="help" style="position:absolute;top:50px;left:45px;">
                                            <div class="slds-popover__body">Drag-n-drop onto a Task Card to assign task to this User.</div>
                                        </div>
                                    </div>
                                    <div style="background-color: #f4f6f9;">
                                        <ul class="dropdown__list kanban-user-filter">
                                            <li class="slds-dropdown__item {!IF(onlyParticipants,'slds-is-selected','slds-not-selected')} show-participants-only">
                                                <a href="javascript:void(0)" role="menuitemradio">
                                                    <span class="slds-truncate">
                                                        <c:svg styleClass="slds-icon slds-icon--selected slds-icon--x-small slds-icon-text-default slds-m-right--x-small" path="{!URLFOR($Resource.advpm__SLDS_ADV, 'assets/icons/utility-sprite/svg/symbols.svg#check')}" />
                                                        <apex:outputLabel for="chkParticipantsOnly" value="Show Participants Only" styleClass="opt-text" />
                                                    </span>
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                    <apex:outputPanel layout="block" id="user-list-container">
                                        <div class="user-list-column" style="max-height: 320px;overflow: auto;">
                                            <div class="slds-has-dividers--around-space">
                                                <apex:repeat value="{!list_Users}" var="u">
                                                    <div class="slds-item uiDraggable user-drag" id="{!u.Id}" data-src="{!u.SmallPhotoUrl}" data-alt="{!u.Name}" data-title="{!u.Name}">
                                                        <span class="avtarIcon">
                                                            <span class="slds-avatar slds-avatar--circle slds-avatar--small">
                                                                <img class="task-user-list-photo" src="{!u.SmallPhotoUrl}" alt="{!u.Name}" title="{!u.Name}" />
                                                            </span>
                                                            <span title="Drag-n-drop onto a Task Card to assign task to this User."><i>{!u.Name}</i></span>
                                                        </span>
                                                    </div>
                                                </apex:repeat>
                                            </div>
                                        </div>
                                    </apex:outputPanel>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Side Options Handle -->
    <div id="paneSlide" style="display:block">
        <div class="handle ">
            <img src="{!URLFOR($Resource.SLDS_ADV, 'assets/icons/utility/logout_60.png')}" class="kanbanMenu out" alt="Expand Kanban Menu" title="Expand Kanban Menu" />
        </div>
    </div>
    <style type="text/css">
        .modal-backdrop {
          position: fixed;
          top: 0;
          right: 0;
          bottom: 0;
          left: 0;
          z-index: 1040;
          background-color: #000000;
        }
        .modal-backdrop.fade {
          opacity: 0;
        }
        .modal-backdrop,
        .modal-backdrop.fade.in {
          opacity: 0.8;
          filter: alpha(opacity=80);
        }
        .modal {
          position: fixed;
          top: 10%;
          left: 50%;
          z-index: 1050;
          width: 560px;
          margin-left: -280px;
          background-color: #ffffff;
          border: 1px solid #999;
          border: 1px solid rgba(0, 0, 0, 0.3);
          *border: 1px solid #999;
          /* IE6-7 */
          -webkit-border-radius: 6px;
          -moz-border-radius: 6px;
          border-radius: 6px;
          -webkit-box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
          -moz-box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
          box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
          -webkit-background-clip: padding-box;
          -moz-background-clip: padding-box;
          background-clip: padding-box;
          outline: none;
        }
        .modal.fade {
          -webkit-transition: opacity .3s linear, top .3s ease-out;
          -moz-transition: opacity .3s linear, top .3s ease-out;
          -o-transition: opacity .3s linear, top .3s ease-out;
          transition: opacity .3s linear, top .3s ease-out;
          top: -25%;
        }
        .modal.fade.in {
          top: 10%;
        }
        .modal-header {
          padding: 9px 15px;
          border-bottom: 1px solid #eee;
        }
        .modal-header h3 {
          margin: 0;
          line-height: 30px;
        }
        .modal-body {
          position: relative;
          overflow-y: auto;
          max-height: 400px;
          padding: 15px;
        }
        .modal-header h3 {
            margin: 0;
            line-height: 30px;
        }
        .modal-header h3 {
            font-size: 24.5px;
        }
        .modal-header h1,.modal-header  h2,.modal-header  h3 {
            line-height: 40px;
        }
        .modal-header h1,.modal-header  h2,.modal-header  h3,.modal-header  h4,.modal-header  h5,.modal-header  h6 {
            margin: 10px 0;
            font-family: inherit;
            font-weight: bold;
            line-height: 20px;
            color: inherit;
            text-rendering: optimizelegibility;
        }
        .modal-frame{border:none;width:100%;height:100%}
        .big-modal.modal{width:900px!important;overflow-y:hidden!important}
        .big-modal-body{overflow-x:hidden;overflow-y:hidden!important;width:100%!important;height:460px!important;max-height:none!important;padding:0!important}
        .modal-header .close {
            margin-top: 2px;
        }
        button.close {
            padding: 0;
            cursor: pointer;
            background: transparent;
            border: 0;
            -webkit-appearance: none;
        }
        .close {
            float: right;
            font-size: 30px!important;
            font-weight: bold;
            line-height: 30px!important;
            color: #000000;
            text-shadow: 0 1px 0 #ffffff;
            opacity: 0.2;
            filter: alpha(opacity=20);
        }
        .modal-backdrop, .modal-backdrop.fade.in {
            opacity: 0.8;
            filter: alpha(opacity=80);
        }
        .modal-backdrop {
            position: fixed;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: 1040;
            background-color: #000000;
        }
    </style>
    <!-- Task Modal Form -->
    <div class="modal big-modal slds-hide" id="task-modal">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true" onclick="doClose('TASK',false);return;">&times;</button>
          <h3>Task</h3>
        </div>
        <div class="modal-body big-modal-body" id="task-modal-body">    
            <iframe class="modal-frame" id="task-frame" src="about:blank"></iframe>
        </div>
    </div>
    <div class="modal-backdrop  in slds-hide"></div>
</apex:page>